安装
    wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-4.6.3-1.x86_64.rpm
    yum localinstall grafana-4.6.3-1.x86_64.rpm

配置
    vim /etc/grafana/grafana.ini

    data = /data/grafana
    logs = /var/log/grafana
    plugins = /data/grafana/plugins
    admin_user = Admin
    admin_password = grafana

创建目录和赋予权限
    mkdir -p /data/grafana/plugins
    chown -R grafana:grafana /data/grafana

启动
    systemctl start grafana-server
    systemctl status grafana-server

Nginx配置
    会默认使用grafana用户和组运行Granfa进程。默认会开启HTTP的3000端口。
    启动服务之后直接直接在浏览器访问http://IP:3000就会出现如下界面，默认账号和用户名为admin/admin,可以修改配置文件




图形界面-接入ES数据源
    add data source
    http://docs.grafana.org/features/datasources/elasticsearch/

    HTTP SETTING
    我们做了反向代理  选择直连方式  填代理的ip
    通过浏览器的network可以看到 连接数据源是否成功

    其中index name和kibana中的index保持一致   nginx_error_log_*，或者我们使用*把全部的索引都匹配到

新建仪表盘
    左侧的悬浮按钮-->add panel --> 选择grafa图形
    选择图形顶部的中间对它进行编辑 ---> eidt ---> 选择对应导入的数据源 ---> 操作Metric、和Group By

    选择官方提供的一些dashboard进行改造
    下载---->导入dashboard
    https://grafana.com/dashboards/2292

学习ES的查询语法
    https://www.elastic.co/guide/en/elasticsearch/reference/5.0/query-dsl-query-string-query.html#query-string-syntax


# nginx access log format

log_format main   '{"@timestamp":"$time_iso8601",'
                        '"@source":"$server_addr",'
                        '"host":"$hostname",'
                        '"ip":"$http_x_forwarded_for",'
                        '"client":"$remote_addr",'
                        '"request_method":"$request_method",'
                        '"scheme":"$scheme",'
                        '"domain":"$server_name",'
                        '"referer":"$http_referer",'
                        '"request":"$request_uri",'
                        '"args":"$args",'
                        '"size":$body_bytes_sent,'
                        '"status": $status,'
                        '"responsetime":$request_time,'
                        '"upstreamtime":"$upstream_response_time",'
                        '"upstreamaddr":"$upstream_addr",'
                        '"http_user_agent":"$http_user_agent",'
                        '"https":"$https"'
                        '}';

# Logstash nginx_access.conf

input {
    file {
        #这里根据自己日志命名使用正则匹配所有域名访问日志
        path => [ "/usr/local/nginx/logs/*_access.log" ]
        ignore_older => 0
    codec => json
    }
}

filter {
    mutate {
      convert => [ "status","integer" ]
      convert => [ "size","integer" ]
      convert => [ "upstreatime","float" ]
      remove_field => "message"
    }
    geoip {
        source => "ip"
    }


}
output {
    elasticsearch {
        hosts => "127.0.0.1:9200"
        index => "logstash-nginx-access-%{+YYYY.MM.dd}"
    }
#    stdout {codec => rubydebug}
}