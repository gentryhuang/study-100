非侵入式
https://github.com/youngperson/study-100/wiki/%E6%8E%A5%E5%8F%A3%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90-xhprof

侵入式
https://www.jianshu.com/p/8ea17a593f20


xhprof接入
0、数据字段
     wt、ct、mu、pmu、log、uri、time
1、选择非侵入式还是侵入式，各有利弊。
     直接修改Nginx配置文件制定xhprof的打点文件还是用compose的去管理打点文件
2、打点数据的写的总量有多少，QPS大概多少，选择哪种消息队列
     写入到Redis中(集群、主从)
3、怎么消费
     读取Redis->写入到MySQL(数据量大的话每天一个表)->每天凌晨脚本去分析MySQL把结果在次存储到MySQL的分析表中->页面展示
     读取Redis->写入到ES中去->写代码去调用ES的接口分析数据->页面展示



1、打点的URI接口的频率做成K=>V的管理方式，从内存中读取频率的数据


数据收集

// xhprof打点频率,k=>v形式,可以随时修改

if (当前URI的频率判断 && function_exists('xhprof_enable')) {
    xhprof_enable(XHPROF_FLAGS_MEMORY|XHPROF_FLAGS_CPU);
}

register_shutdown_function(function () {
    $uname = php_uname('n');
    $time = time();
    $xhprofData = xhprof_disable();
    $log = array(
        'REQUEST_URI' => parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH),
        'HTTP_HOST'   => $uname,
        'REQUEST_METHOD' => $_SERVER['REQUEST_METHOD'],
        'REQUEST_TIME' => $time,
        'xhprof_data' => $xhprofData,
    );

    // 压缩日志,查看是否安装了msgpack
    $log = msgpack_pack($log);
    $key = 'chan-xhprof-log';

    $redis = new Redis();
    $redis->connect('localhost',port);
    $redis->publish($key, $log);
});
数据会按照pub-sub的方式存入redis中。


落地 & 分析

启动一个常驻进程去订阅Redis
按业务分库，业务内按天分表。
进行业务的容量、qps评估。
具体怎么存按自己业务的规模来操作，规模小的话就放到一个表里面是OK的。


建库 & 建表

create database api_request;
create table api_request_2018_02_27 (
  id            INT(10) PRIMARY KEY NOT NULL AUTO_INCREMENT,
  uri           VARCHAR(100),
  time          INT(10),
  wt            INT(10),
  ct            INT(10),
  mu            INT(10),
  pmu           INT(10),
  log           TEXT,
  host          VARCHAR(30)
);


分析数据



