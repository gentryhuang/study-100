三台机器、每台机器下2个Redis节点，一主一从，三台构成Redis集群

机器说明(内存4g、64位、硬盘300G)

    10.111.11.139   主节点7000  从节点8001    （该节点上的实例  7000   8000）
    10.111.11.140   主节点7001  从节点8002    （该节点上的实例  7001   8001）
    10.111.11.141   主节点7002  从节点8000    （该节点上的实例  7002   8002）

安装Redis

    下载、解压、编译
    # cd /usr/local/src
    # wget http://download.redis.io/releases/redis-4.0.8.tar.gz
    # tar zxvf redis-4.0.8.tar.gz
    # cd redis-4.0.8
    # make && make install

    安装好之后命令在/usr/local/src/redis-4.0.8/src下面，在/usr/local/bin下面也会有一份，用的时候就不需要考虑所在目录了


配置

    # mkdir -p /usr/local/redis-cluster
    # cd /usr/local/redis-cluster

    该集群目录下创建以端口命令的目录，表示运行的实例端口
    # mkdir 7000 8000

    把配置文件拷贝到端口的目录下去
    # cp /usr/local/src/redis-4.0.8/redis.conf /usr/local/redis-cluster/7000/
    # cp /usr/local/src/redis-4.0.8/redis.conf /usr/local/redis-cluster/8000/

    # vi 7000/redis.conf    配置主节点参照下面的
    # mkdir -p  /var/log/redis

    port                  7000                        //端口7000,7001,7002 等全部节点
    bind                  10.111.11.139               //默认ip为127.0.0.1，需要改为其他节点机器可访问的ip，否则创建集群时无法访问对应的端口，无法创建集群
    daemonize             yes                         //redis后台运行
    pidfile               /var/run/redis_7000.pid     //pidfile文件对应7000,7001,7002 等全部节点
    logfile               /var/log/redis/redis_7000.log //日志文件
    cluster-enabled       yes                         //开启集群，把注释#去掉
    cluster-config-file   nodes_7000.conf             //集群的配置，配置文件首次启动自动生成 7000,7001,7002 等全部节点
    cluster-node-timeout  15000                       //请求超时，默认15秒，可自行设置
    appendonly            yes                         //aof日志开启，有需要就开启，它会每次写操作都记录一条日志
    maxmemory             1gb                         //一般推荐Redis设置内存为最大物理内存的四分之三，
    maxclients            100000
    maxmemory-policy      volatile-ttl                //根据LRU算法生成的过期时间来删除。


启动

    # redis-server /usr/local/redis-cluster/7000/redis.conf
    # redis-server /usr/local/redis-cluster/8000/redis.conf
    # ps -ef | grep redis

接着在另外两台机器上，重复以上。

================================================================================================================================================

关闭防火墙

    # firewall-cmd --state  ##查看防火墙状态
    # systemctl stop firewalld  ##关闭防火墙


================================================================================================================================================

安装ruby

    随便找一台机器上安装下下面的(这里在10.111.11.140)
    # yum install ruby ruby-devel rubygems rpm-build
    # gem install redis

    Fetching: redis-4.0.1.gem (100%)
    ERROR:  Error installing redis:
        redis requires Ruby version >= 2.2.2.

    # gem install rubygems-update
    # update_rubygems

    # gem install redis

================================================================================================================================================


把3台机器连接在一起形成集群

需要用到的命令就是redis-trib.rb,这是官方的一个用ruby写的一个操作redis cluster的命令，所以，你的机器上需要安装ruby。
随便在一台机器上操作下面的命令

# ll /usr/local/src/redis-4.0.8/src/redis-trib.rb
# /usr/local/src/redis-4.0.8/src/redis-trib.rb create --replicas 1 10.111.11.139:7000 \
  10.111.11.140:7001 10.111.11.141:7002

  >>> Creating cluster
  *** ERROR: Invalid configuration for cluster creation.
  *** Redis Cluster requires at least 3 master nodes.
  *** This is not possible with 3 nodes and 1 replicas per node.
  *** At least 6 nodes are required.

我们应该先给每台机器的各个节点全部是一样的配置才行，然后连接在一起的时候去指定主从关系

修改上面的从配置和主配置一样的

# /usr/local/src/redis-4.0.8/src/redis-trib.rb create --replicas 1 10.111.11.139:7000 10.111.11.140:7001 10.111.11.141:7002 10.111.11.139:8000 10.111.11.140:8001 10.111.11.141:8002

>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
10.111.11.139:7000
10.111.11.140:7001
10.111.11.141:7002
Adding replica 10.111.11.140:8001 to 10.111.11.139:7000
Adding replica 10.111.11.141:8002 to 10.111.11.140:7001
Adding replica 10.111.11.139:8000 to 10.111.11.141:7002
M: 3f8713463f1fb40f366e242e1fd3de65838c1618 10.111.11.139:7000
   slots:0-5460 (5461 slots) master
M: 40ad596027f02fa91546b5a5249c4093e0fbc00b 10.111.11.140:7001
   slots:5461-10922 (5462 slots) master
M: 1f95c51bb323e8f15170950874f082e3ab5d0bd5 10.111.11.141:7002
   slots:10923-16383 (5461 slots) master
S: ae8feb0458fa08422d3c178fc098ab3a2e822d6e 10.111.11.139:8000
   replicates 1f95c51bb323e8f15170950874f082e3ab5d0bd5
S: d87881af737465bc856ae4be12c92945c080e07a 10.111.11.140:8001
   replicates 3f8713463f1fb40f366e242e1fd3de65838c1618
S: 2c6de5c3463585eff92d397d00313ba73651910b 10.111.11.141:8002
   replicates 40ad596027f02fa91546b5a5249c4093e0fbc00b
Can I set the above configuration? (type 'yes' to accept):  yes

>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join....
>>> Performing Cluster Check (using node 10.111.11.139:7000)
M: 3f8713463f1fb40f366e242e1fd3de65838c1618 10.111.11.139:7000
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 2c6de5c3463585eff92d397d00313ba73651910b 10.111.11.141:8002
   slots: (0 slots) slave
   replicates 40ad596027f02fa91546b5a5249c4093e0fbc00b
M: 40ad596027f02fa91546b5a5249c4093e0fbc00b 10.111.11.140:7001
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
M: 1f95c51bb323e8f15170950874f082e3ab5d0bd5 10.111.11.141:7002
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: ae8feb0458fa08422d3c178fc098ab3a2e822d6e 10.111.11.139:8000
   slots: (0 slots) slave
   replicates 1f95c51bb323e8f15170950874f082e3ab5d0bd5
S: d87881af737465bc856ae4be12c92945c080e07a 10.111.11.140:8001
   slots: (0 slots) slave
   replicates 3f8713463f1fb40f366e242e1fd3de65838c1618
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
================================================================================================================================================

验证集群

    测试下集群的状态
    [root@qshz-analysis-4 redis-cluster]# /usr/local/src/redis-4.0.8/src/redis-trib.rb check 10.111.11.141:7002
    >>> Performing Cluster Check (using node 10.111.11.141:7002)
    M: 1f95c51bb323e8f15170950874f082e3ab5d0bd5 10.111.11.141:7002
       slots:10923-16383 (5461 slots) master
       1 additional replica(s)
    S: ae8feb0458fa08422d3c178fc098ab3a2e822d6e 10.111.11.139:8000
       slots: (0 slots) slave
       replicates 1f95c51bb323e8f15170950874f082e3ab5d0bd5
    M: 40ad596027f02fa91546b5a5249c4093e0fbc00b 10.111.11.140:7001
       slots:5461-10922 (5462 slots) master
       1 additional replica(s)
    S: 2c6de5c3463585eff92d397d00313ba73651910b 10.111.11.141:8002
       slots: (0 slots) slave
       replicates 40ad596027f02fa91546b5a5249c4093e0fbc00b
    M: 3f8713463f1fb40f366e242e1fd3de65838c1618 10.111.11.139:7000
       slots:0-5460 (5461 slots) master
       1 additional replica(s)
    S: d87881af737465bc856ae4be12c92945c080e07a 10.111.11.140:8001
       slots: (0 slots) slave
       replicates 3f8713463f1fb40f366e242e1fd3de65838c1618
    [OK] All nodes agree about slots configuration.
    >>> Check for open slots...
    >>> Check slots coverage...
    [OK] All 16384 slots covered.


    测试连接集群(记得加-c,集群方式去连接)
    [root@qshz-analysis-3 redis-cluster]# redis-cli -c -h 10.111.11.139  -p 8000

    测试某个节点挂掉(数据没丢失)
    # kill -9  xxxx

    https://www.zybuluo.com/phper/note/195558

    新增1个节点（默认是新增master节点）
        配置好后启动该节点。
        加入到集群中去 redis-trib.rb add-node IP:port(新增节点) Ip:port(现有存在的一个节点)
        添加节点后记得分配哈希槽
        http://blog.51yip.com/nosql/1726.html


    提供给调用方
        redis每个节点都相当于是整个集群的proxy
        hostname  port(0-9)
        有个监控中心，注册中心去维护每个业务的Redis集群，如果有节点新增或者节点坏掉。及时变更在注册中心里面。
        调用方就直接从注册中心去哪一批Redis的ip和port

注意

================================================================================================================================================

拥有slot的节点下线就会造成集群停止服务
Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的
要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。
在redis cluster没出来之前，codis被当做redis cluster在用

设置下内存最大上限和淘汰策略

================================================================================================================================================

总结：
    设置一个key的时候都会去其它的节点中找  同类型  同名字的key   如果找到了就会Redirected to slot 进行修改
    没找到也会根据solt的分配去对应的节点下设置值

    集群中随意一个节点都能去设置和读取  自身节点不存在的key

    list结构也验证过，复合上面结论

    存储是采用的虚拟曹分区，奇妙使用了哈希空间。
        slot=CRC16（key）& 16383 每次键都是根据这个计算 得到slot位置 然后写入和读取

    RedisCluster本身就能自动进行Master选举和Failover切换。
    数据按照slot存储分布在多个redis实例上
    降低硬件成本和运维成本，提高系统的扩展性和可用性。


    使用的时候，代码中都不需要去自己分片之类的了，3.X之后的集群很爽

    VIP对Redis集群的讲解
    http://mdba.cn/2016/06/08/%E5%88%86%E4%BA%AB%EF%BC%9A%E5%94%AF%E5%93%81%E4%BC%9A%E5%A4%A7%E8%A7%84%E6%A8%A1-redis-cluster-%E7%9A%84%E7%94%9F%E4%BA%A7%E5%AE%9E%E8%B7%B5/
================================================================================================================================================

管理Redis
    扫描30天僵尸key
    扫描large key(大于512KB)
    扫描没有设置过期时间的key

    参考：https://github.com/sripathikrishnan/redis-rdb-tools


================================================================================================================================================



每个类型最大能存储多少


string
    字符串是redis值最基本的一种。redis字符串是二进制安全的，这意味着redis字符串可以包含任何类型的数据，例如jpeg图像或序列化的ruby对象。
    一个字符串值的最大长度可以是512M。

    使用字符串作为使用incr系列命令的原子计数器：incr，decr，incrby。
    用append命令附加到字符串。
    使用字符串作为getrange和setrange的随机访问向量。
    在很小的空间内编码大量数据，或者使用getbit和setbit创建一个redis支持的布隆过滤器。

list
    redis列表仅仅是按插入顺序排序的字符串列表。可以将元素添加到redis列表中，在列表的头部（左侧）或尾部（右侧）推送新元素。
    列表的最大长度为232  -  1个元素（4294967295，每个列表元素超过40亿个元素）。从时间复杂度的角度来看，redis列表的主要特点是支持在头部和尾部附近不断插入和删除元素，即使插入了数百万个项目。
        访问元素在列表的极端附近非常快，但如果尝试访问非常大的列表的中间部分，访问元素会很慢，因为它是o（n）操作。

    在社交网络中建模时间线，使用lpush在用户时间线中添加新元素，并使用lrange来检索一些最近插入的项目。
    你可以使用lpush和ltrim一起创建一个不超过给定数量元素的列表，但只记得最新的n个元素。
    列表可以用作消息传递原语，例如，请参阅众所周知的用于创建后台作业的resque ruby​​库。
    您可以使用列表做更多的事情，这种数据类型支持许多命令，包括阻止像blpop这样的命令。

set
    redis集合是一个无序的字符串集合。可以添加，删除和测试o（1）中的成员是否存在（恒定时间，而不管该集合中包含的元素的数量）。
    redis集具有不允许重复成员的理想属性。多次添加相同的元素将导致一个集合具有此元素的单个副本。实际上这意味着添加成员不需要检查是否存在然后添加操作。
    关于redis集的一个非常有趣的事情是它们支持许多服务器端命令来从现有集合开始计算集合，所以你可以在很短的时间内完成集合，
        交集和集合的差异。一套成员的最大数量为232  -  1（4294967295，每套成员超过40亿）。

    您可以使用redis集跟踪独特的事物。想知道访问特定博客文章的所有独特IP地址？每次处理页面视图时只需使用sadd。你确定重复的ips不会被插入。
    redis集合很好地代表关系。您可以使用一个集合来创建一个带有redis的标记系统来表示每个标记。那么您可以使用sadd命令将所有具有给定标签的对象的所有id添加到代表此特定标签的集合中。你想同时拥有三个不同标签的所有对象的所有ID？只是使用华丽。
    您可以使用集合随机使用spop或srandmember命令来提取元素。

hash
    redis哈希是字符串字段和字符串值之间的映射，因此它们是表示对象的完美数据类型（例如，具有诸如姓名，年龄等许多字段的用户）：
    一个带有几个字段的散列（其中少数意思是多达一百个左右）以一种占用很少空间的方式存储，因此可以将数百万个对象存储在一个小型redis实例中。
    而散列主要用于表示对象，它们能够存储许多元素，因此您还可以将散列用于许多其他任务。
    每个散列可以存储高达232-1个字段值对（超过40亿）。

Sorted set
    与redis集合类似，redis排序集合不重复字符串集合。不同之处在于，有序集合中的每个成员都与分数相关联，这是为了将有序排序的集合从最小分数到最大分数而使用的。而成员是独特的，分数可能会重复。
    通过有序集合，您可以以非常快速的方式（与元素数量的对数成比例的时间）添加，删除或更新元素。由于元素是按顺序排列的，并且之后没有排序，所以您还可以通过得分或按排名（位置）以非常快的方式获取范围。访问有序集合的中间部分也非常快，因此您可以使用有序集合作为非重复元素的智能列表，您可以快速访问所需的所有内容：按顺序排列元素，快速存在测试，快速访问中间元素！
    简而言之，通过排序集合，您可以完成很多性能卓越的任务，这些任务很难在其他类型的数据库中建模。

    在一个大规模的在线游戏中担任领导者，每次提交新分数时，都使用zadd更新它。您可以轻松地使用zrange获得顶级用户，您还可以使用zrank在给定用户名的情况下返回列表中的排名。同时使用zrank和zrange可以向用户显示与给定用户相似的分数。非常快。
    经常使用排序集合来索引存储在redis中的数据。例如，如果您有许多代表用户的哈希，则可以使用具有以用户年龄作为分数和用户ID作为值的元素的排序集。所以使用zrangebyscore可以轻松快速地检索具有给定时间间隔的所有用户。

Bitmaps and HyperLogLogs
    redis还支持位图和hyperloglog，它们实际上是基于字符串基本类型的数据类型，但具有它们自己的语义。


https://redis.io/topics/data-types