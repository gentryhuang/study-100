https://walle-web.io/docs/zh-cn/installation.html

Walle 一个web部署系统工具，配置简单、功能完善、界面流畅、开箱即用！支持git、svn版本管理，支持各种web代码发布，PHP，Python，JAVA等代码的发布、回滚，可以通过web来一键完成。

安装

1、宿主机安装 ansible
    宿主机无需其他配置，兼容 ~/.ssh/config 名称、证书配置
    目标机无需额外配置

# yum install ansible


walle
    项目配置 中 开启Ansible
    (可选) config/params.php 配置 ansible_hosts 文件存放路径
    按正常流程发布、上线代码，传输文件、远程执行命令均会通过ansible并发执行

1、代码下载

说明：找好宿主机器(walle所在的机器)，是一个中间机器，是代码托管与远程目标机群的纽带。所以宿主机需要与代码托管(github/gitlab)和远程目标机群都建立ssh-key信任。
选择10.111.11.120做为宿主机器
[root@qshz-analysis test-sites]# cat ~/.ssh/id_rsa.pub

登录目标机器---把宿主机器的公钥放置到目标机器中去
[root@qshz-analysis-2 ~]# echo ssh-rsa 公钥字符串 >> ~/.ssh/authorized_keys

# cd /www/sites/
# git clone https://github.com/meolu/walle-web.git

2、设置MySQL连接
# cd walle-web
# vi config/local.php # +23 设置mysql连接

'db' => [
    'dsn'       => 'mysql:host=localhost;dbname=walle', # 新建数据库walle
    'username'  => 'walle',                          # 连接的用户名
    'password'  => '123456',                         # 连接的密码
],

CREATE USER 'walle'@'localhost' IDENTIFIED BY '123456';
CREATE DATABASE walle DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;
GRANT ALL ON walle.* TO 'walle'@'%' IDENTIFIED BY 'walle';


3、安装composer
# curl -sS https://getcomposer.org/installer | php
# mv composer.phar /usr/local/bin/composer

4、安装vendor
# composer install  # 如果缺少bower-asset的话， 先安装：composer global require "fxp/composer-asset-plugin:*"

5、初始化项目
# ./yii walle/setup   # 初始化项目,需要你的yes


6、配置Nginx
    配置nginx/apache的webroot指向walle-web/web
    凡是在第7步刷新页面看到50x均是前5步安装不完整，自行检查
    凡是在第7步刷新页面看到404均是nginx配置不当，自行检查
# vim /etc/nginx/conf.d/walle.conf

server {
	listen 8099;
	index index.html index.php;
	charset utf-8;

	root "/www/sites/walle-web/web";
	index index.php;

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

	location ~ \.php$ {
		fastcgi_pass 10.111.11.120:9099;
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

		fastcgi_buffer_size 16k;
		fastcgi_buffers 4 16k;
		fastcgi_connect_timeout 300;
		fastcgi_send_timeout 300;
		fastcgi_read_timeout 300;
	}
}

# 代理机器下的Nginx配置(用80端口记得把nginx.conf中的80注释掉)

server
{
    listen 80;
    location / {
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://10.111.11.120:8099;
    }
    access_log /var/log/nginx/walle.log;
}
7、QA

7-1、【宿主机器对目前的读写权限】宿主机代码检出检测出错，请确认php进程用户apache有代码存储仓库/www/test-sites读写权限。

    [root@qshz-analysis test-sites]# chown -R www_php:www_php /www/test-sites/
    [root@qshz-analysis test-sites]# chmod -R 755 /www/test-sites/

    测试环境会在宿主机器中的代码检出仓库路径下创建基于git地址中项目名称的目录 git@code.qschou.com:qshz/hubble.git

    # 测试环境
        mdkir /www/test-sites/test/hubble
    # 预发布环境
        mdkir /www/test-sites/simu/hubble
    # 线上环境
        mdkir /www/test-sites/prod/hubble



7-2、【php-fpm进程的用户生成公钥】宿主机代码检出检测出错，请确认把php进程用户apache的ssh-key加入git的deploy-keys列表。(代码会检测当前PHP-FPM运行的用户和组,我们新建一个)

    [root@qshz-analysis hubble]# su apache
    This account is currently not available.

    [root@qshz-analysis hubble]# cat /etc/passwd | grep apache
    apache:x:48:48:Apache:/usr/share/httpd:/sbin/nologin

    发现它的shell是“/sbin /nologin”，需要将起改成“/bin/bash”,修改完毕后，保存退出!(不影响到php-fpm,照样平滑重启也没问题)
    [root@qshz-analysis hubble]# vim /etc/passwd
    [root@qshz-analysis hubble]# su apache
    bash-4.2$ ssh-keygen -t rsa -C "renliang_wan@qingsongchou.com"

    发现php-fpm自带的用户Apache不能生产公钥

    ================================================

    上面操作发现php-fpm自带的用户Apache不能生产公钥，我们选择新建一个用户做php-fpm的用户
    useradd会生成一个同名字的组
    [root@qshz-analysis hubble]# useradd www_php
    [root@qshz-analysis hubble]# id www_php
    [root@qshz-analysis hubble]# vim /etc/php-fpm.d/www.conf
    listen.xxx 如果自身是注释的就不改
    # listen.ower = www_php
    # listen.group = www_php
    user = www_php
    group = www_php

    平滑重启PHP-FPM,发现用户边为我们改的www_php了,在报没有权限的地方加上
    chown www_php:www_php -R xx
    chmod -R 755 XXXX

    [error] 2481#0: *3 FastCGI sent in stderr: “PHP message: PHP Fatal error: Uncaught Exception: Cannot start session. in /usr/share/zabbix/include/classes/core/CSession.php:50
    修改php-fpm的用户和组之后，zabbix一直报错，session相关的
    路径名称：/var/lib/php/session与/var/lib/php/wsdlcache
    chown www_php:www_php -R /var/lib/php
    chmod -R 755 /var/lib/php


    ================================================

    把www_php生成的公钥添加到需要免密码pull的项目中去
    [root@qshz-analysis hubble]# ps -ef | grep php-fpm

    根据gitlab中的提示，切换到www_php用户，生产公钥，部署到gitlab
    [root@qshz-analysis hubble]# su www_php
    [www_php@qshz-analysis hubble]$ ssh-keygen -t rsa -C "renliang_wan@qingsongchou.com"
    根据提示公钥生成在/home/www_php/.ssh/
    [www_php@qshz-analysis hubble]$ cat /home/www_php/.ssh/id_rsa.pub


    宿主机代码检出检测出错，请确认把php进程用户www_php的ssh-key加入git的deploy-keys列表
    添加之后，在walle-web中检测发现还报上面的错误，手动su www_php用户去git clone git@code.qschou.com:qshz/hubble.git下，然后在删除文件去web中试试



7-3、目标机器检测出错，请确认php进程apache用户ssh-key加入目标机器的root用户ssh-key信任列表。
    目标机器的用户选择root,因为我们把宿主机器的www_php的公钥，给到的是目标机器的root的authorized_keys中

    把上面生成的公钥复制到目标机器中去，实现免密码登录

    从这里可以看出，root用户的公钥在~/.ssh/ 其它用户的在/home/用户名字/.ssh/

    [root@qshz-analysis www_php]# cat /home/www_php/.ssh/id_rsa.pub
    登录进去目标主机
    [root@qshz-analysis www_php]# ssh root@10.111.11.123
    [root@qshz-analysis-2 ~]# echo ssh-rsa 公钥字符串 >> ~/.ssh/authorized_keys




7-4、目标机器检测出错，请确认root有目标机器发布版本库/www/hubble写入权限。

7-5、RequestsDependencyWarning: urllib3 (1.22) or chardet (2.2.1) doesn't match a supported version! RequestsDependencyWarning
    python库中urllib3 (1.21.1) or chardet (2.2.1) 的版本不兼容

    pip uninstall urllib3
    pip uninstall  chardet
    pip install requests

7-6、ansible cannot overwrite directory ?/data/wwwroot2? with non-directorynon-zero return code
    为了避免这个错误，我们把webroot和发布版本库的路径不要设置在同一个级别下面

    webroot的目录一开始也不能存在，代码的最终部署路径，请不要在目标机新建此目录，walle会自动生成此软链，正确设置父目级录即可

    说明：对应测试环境已有的代码，我们可以进行备份一下。然后一个个的对/data/wwwroot/下面的项目进程删除，用瓦力去发布。
         对于线上的环境已有的代码，可以一台台的替换，把Nginx一台台的从负载均衡中摘除，然后在用瓦力去部署后，在添加进负载均衡中



8、配置邮箱账户

    # cd /www/sites/walle-web
    # vim config/local.php


在QA机器上部署这个walle
10.111.11.83


小结：代码中会去判断宿主机器(walle项目所在机器)php-fpm的运行用户，根据此用户去生成rsa公钥，实现免密码登录。
     rsa公钥的作用如下：
     1、和Gitlba中代码之间的免密码操作,在gitlab中添加上公钥
     2、宿主机器和目标机器之间的免密码，在目标机器中加上此用户生成的公钥
     3、web界面的操作，宿主机器从gitlab中拉取代码---->ansible(基于ssh)--->目标机器

 选取分支，版本选取(是指每次commit，push后产生的一个版本)
